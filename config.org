* Package Management
Always try to install missing packages.

#+BEGIN_SRC emacs-lisp
(customize-set-variable 'use-package-always-ensure t)
#+END_SRC

* Graphics and Looks
** Font
Use [[https://github.com/tonsky/FiraCode][Fira Code]] with the install instructions found [[https://github.com/tonsky/FiraCode][here]]. Enables both the font and its font ligatures.

#+BEGIN_SRC emacs-lisp
(defun fira-code-mode--make-alist (list)
  "Generate prettify-symbols alist from LIST."
  (let ((idx -1))
    (mapcar
     (lambda (s)
       (setq idx (1+ idx))
       (let* ((code (+ #Xe100 idx))
          (width (string-width s))
          (prefix ())
          (suffix '(?\s (Br . Br)))
          (n 1))
     (while (< n width)
       (setq prefix (append prefix '(?\s (Br . Bl))))
       (setq n (1+ n)))
     (cons s (append prefix suffix (list (decode-char 'ucs code))))))
     list)))

(defconst fira-code-mode--ligatures
  '("www" "**" "***" "**/" "*>" "*/" "\\\\" "\\\\\\"
    "{-" "[]" "::" ":::" ":=" "!!" "!=" "!==" "-}"
    "--" "---" "-->" "->" "->>" "-<" "-<<" "-~"
    "#{" "#[" "##" "###" "####" "#(" "#?" "#_" "#_("
    ".-" ".=" ".." "..<" "..." "?=" "??" ";;" "/*"
    "/**" "/=" "/==" "/>" "//" "///" "&&" "||" "||="
    "|=" "|>" "^=" "$>" "++" "+++" "+>" "=:=" "=="
    "===" "==>" "=>" "=>>" "<=" "=<<" "=/=" ">-" ">="
    ">=>" ">>" ">>-" ">>=" ">>>" "<*" "<*>" "<|" "<|>"
    "<$" "<$>" "<!--" "<-" "<--" "<->" "<+" "<+>" "<="
    "<==" "<=>" "<=<" "<>" "<<" "<<-" "<<=" "<<<" "<~"
    "<~~" "</" "</>" "~@" "~-" "~=" "~>" "~~" "~~>" "%%"
    "x" ":" "+" "+" "*"))

(defvar fira-code-mode--old-prettify-alist)

(defun fira-code-mode--enable ()
  "Enable Fira Code ligatures in current buffer."
  (setq-local fira-code-mode--old-prettify-alist prettify-symbols-alist)
  (setq-local prettify-symbols-alist (append (fira-code-mode--make-alist fira-code-mode--ligatures) fira-code-mode--old-prettify-alist))
  (prettify-symbols-mode t))

(defun fira-code-mode--disable ()
  "Disable Fira Code ligatures in current buffer."
  (setq-local prettify-symbols-alist fira-code-mode--old-prettify-alist)
  (prettify-symbols-mode -1))

(define-minor-mode fira-code-mode
  "Fira Code ligatures minor mode"
  :lighter " Fira Code"
  (setq-local prettify-symbols-unprettify-at-point 'right-edge)
  (if fira-code-mode
      (fira-code-mode--enable)
    (fira-code-mode--disable)))

(defun fira-code-mode--setup ()
  "Setup Fira Code Symbols"
  (set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol"))

(provide 'fira-code-mode)

;; Enable it
(add-hook 'prog-mode-hook 'fira-code-mode)
#+END_SRC

** Color Theme
#+BEGIN_SRC emacs-lisp
(use-package darktooth-theme)
#+END_SRC

* Xah-Fly-Keys
Use `xah-fly-keys` for a better, more ergonomic modal editing mode.

#+BEGIN_SRC emacs-lisp
(use-package xah-fly-keys
  :config
  (xah-fly-keys-set-layout "dvorak")
  (xah-fly-keys 1))

#+END_SRC

* Languages
** C#

Add syntax highlighting
#+BEGIN_SRC emacs-lisp
(use-package csharp-mode)

(defun my-csharp-mode-hook ()
  ;; Add auto pair/brace completion
  (electric-pair-mode 1)       ;; Emacs 24
  (electric-pair-local-mode 1)) ;; Emacs 25

(add-hook 'csharp-mode-hook 'my-csharp-mode-hook)
#+END_SRC

* Org Mode
Update org to lastest version

#+Begin_SRC emacs-lisp
(use-package org
  :ensure org-plus-contrib
  :pin org)
#+END_SRC

* Buffer/File Management
** Projectile Project Management
Use projectile to interact with projects

#+begin_src emacs-lisp
(use-package projectile
  :config
  (projectile-global-mode))
#+end_src

** Helm Completion

#+begin_src emacs-lisp
(use-package helm
  :init
  (helm-mode 1))
#+end_src